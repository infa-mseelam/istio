# syntax = docker/dockerfile:experimental

# clone src
FROM --platform=${BUILDPLATFORM} golang:1.14.8 AS src

ARG VERSION
RUN git clone --depth=1 -b v${VERSION} https://github.com/jaegertracing/jaeger.git /go/src/
WORKDIR /go/src/
RUN git submodule update --init

# build ui
FROM --platform=${BUILDPLATFORM} node AS ui

COPY --from=src /go/src/jaeger-ui /go/src/jaeger-ui
WORKDIR /go/src/jaeger-ui
RUN yarn install --frozen-lockfile && cd packages/jaeger-ui && yarn build

# build golang
FROM --platform=${BUILDPLATFORM} golang:1.14.8 AS builder

COPY --from=src /go/src /go/src
COPY --from=ui /go/src/jaeger-ui/packages/jaeger-ui/build /go/src/jaeger-ui/packages/jaeger-ui/build

WORKDIR /go/src/

RUN --mount=type=cache,id=gomod,target=/go/pkg/mod go get -u github.com/mjibson/esc

RUN esc -pkg assets -o cmd/query/app/ui/actual/gen_assets.go -prefix jaeger-ui/packages/jaeger-ui/build jaeger-ui/packages/jaeger-ui/build
RUN esc -pkg assets -o cmd/query/app/ui/placeholder/gen_assets.go -prefix cmd/query/app/ui/placeholder/public cmd/query/app/ui/placeholder/public

ARG TARGETARCH
RUN --mount=type=cache,id=gomod,target=/go/pkg/mod make build-all-in-one GOOS=$(go env GOOS) GOARCH=${TARGETARCH}

# prepare certs
FROM alpine:3.12 AS certs
RUN apk add --update --no-cache ca-certificates

# final image
FROM alpine:3.12

COPY --from=certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

# Agent zipkin.thrift compact
EXPOSE 5775/udp
# Agent jaeger.thrift compact
EXPOSE 6831/udp
# Agent jaeger.thrift binary
EXPOSE 6832/udp
# Agent config HTTP
EXPOSE 5778
# Collector HTTP
EXPOSE 14268
# Collector gRPC
EXPOSE 14250
# Web HTTP
EXPOSE 16686

ARG TARGETARCH
COPY --from=builder /go/src/cmd/all-in-one/all-in-one-linux-${TARGETARCH} /go/bin/all-in-one-linux
COPY --from=builder /go/src/cmd/all-in-one/sampling_strategies.json /etc/jaeger/

VOLUME ["/tmp"]
ENTRYPOINT ["/go/bin/all-in-one-linux"]
CMD ["--sampling.strategies-file=/etc/jaeger/sampling_strategies.json"]